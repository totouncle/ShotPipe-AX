name: 🚀 Windows 배포 빌드

on:
  # 수동 실행 가능
  workflow_dispatch:
    inputs:
      version:
        description: '버전 번호 (예: v1.3.0)'
        required: false
        default: 'v1.3.0'
  
  # 메인 브랜치에 푸시할 때 자동 실행
  push:
    branches: [ main ]
    paths:
      - 'shotpipe/**'
      - 'main.py'
      - 'requirements.txt'
      - 'shotpipe.spec'
      - 'ShotPipe_Installer.nsi'
      - '.github/workflows/build-windows.yml'

jobs:
  build-windows:
    name: 🖥️ Windows 인스톨러 빌드
    runs-on: windows-latest
    
    steps:
    - name: 📁 소스코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🐍 Python 설정
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 의존성 캐시
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: 🔧 Python 의존성 설치
      run: |
        python -m pip install --upgrade pip setuptools wheel
        echo "Installing requirements..."
        pip install -r requirements.txt
        echo "Installing PyInstaller..."
        pip install pyinstaller[encryption]
        echo "Verifying installations..."
        pip list | findstr -i "pyqt5 pyinstaller shotgun"
        
    - name: 🏗️ NSIS 설치
      run: |
        echo "Installing NSIS..."
        choco install nsis -y
        echo "NSIS installed successfully"
        makensis /VERSION
        
    - name: 🔍 빌드 환경 검증
      run: |
        echo "=== Build Environment Check ==="
        echo "Current directory:"
        dir
        echo "Python version:"
        python --version
        echo "PyInstaller version:"
        pyinstaller --version
        echo "Checking required files:"
        if exist "main.py" echo "✅ main.py found" else echo "❌ main.py missing"
        if exist "shotpipe.spec" echo "✅ shotpipe.spec found" else echo "❌ shotpipe.spec missing"
        if exist "ShotPipe_Installer.nsi" echo "✅ ShotPipe_Installer.nsi found" else echo "❌ ShotPipe_Installer.nsi missing"
        if exist "requirements.txt" echo "✅ requirements.txt found" else echo "❌ requirements.txt missing"
        echo "=== Environment Check Complete ==="
        
    - name: 🚀 독립형 실행파일 빌드
      run: |
        echo "🔨 PyInstaller로 실행파일 생성 중..."
        echo "Working directory: %CD%"
        echo "Starting PyInstaller build..."
        pyinstaller --clean --noconfirm shotpipe.spec
        echo "Build completed, checking output..."
        if exist "dist\ShotPipe.exe" (
          echo "✅ ShotPipe.exe created successfully"
          dir "dist\ShotPipe.exe"
        ) else (
          echo "❌ ShotPipe.exe not found"
          echo "Listing dist directory:"
          dir dist
          exit /b 1
        )
        
    - name: 🎁 NSIS 인스톨러 빌드
      run: |
        echo "📦 NSIS 인스톨러 생성 중..."
        echo "Checking NSIS installation..."
        makensis /VERSION
        echo "Building installer..."
        makensis ShotPipe_Installer.nsi
        if exist "ShotPipe_Setup.exe" (
          echo "✅ Installer created successfully"
          dir "ShotPipe_Setup.exe"
        ) else (
          echo "❌ Installer creation failed"
          exit /b 1
        )
        
    - name: 📦 포터블 버전 생성
      shell: powershell
      run: |
        echo "📁 포터블 버전 패키징 중..."
        Write-Host "Creating portable directory..."
        New-Item -ItemType Directory -Force -Path "ShotPipe_Portable"
        Write-Host "Copying files..."
        Copy-Item "dist\ShotPipe.exe" "ShotPipe_Portable\" -Force
        if (Test-Path "README.md") { Copy-Item "README.md" "ShotPipe_Portable\" -Force }
        if (Test-Path "LICENSE.txt") { Copy-Item "LICENSE.txt" "ShotPipe_Portable\" -Force }
        if (Test-Path "WINDOWS_USER_GUIDE.md") { Copy-Item "WINDOWS_USER_GUIDE.md" "ShotPipe_Portable\" -Force }
        Write-Host "Creating zip archive..."
        $version = "${{ github.event.inputs.version || 'v1.3.0' }}"
        Compress-Archive -Path "ShotPipe_Portable" -DestinationPath "ShotPipe_${version}_Portable.zip" -Force
        Write-Host "Portable version created: ShotPipe_${version}_Portable.zip"
        
    - name: 📤 빌드 결과물 업로드
      uses: actions/upload-artifact@v4
      with:
        name: ShotPipe-Windows-Build-${{ github.event.inputs.version || 'v1.3.0' }}
        path: |
          ShotPipe_Setup.exe
          ShotPipe_*.zip
          dist/ShotPipe.exe
        retention-days: 30
        
    - name: 🎉 빌드 완료 알림
      run: |
        echo "==============================================="
        echo "🎉 빌드 완료!"
        echo "==============================================="
        echo "생성된 파일들:"
        if exist "ShotPipe_Setup.exe" echo "✅ ShotPipe_Setup.exe (인스톨러)"
        if exist "ShotPipe_*.zip" echo "✅ ShotPipe_*_Portable.zip (포터블)"
        if exist "dist\ShotPipe.exe" echo "✅ dist\ShotPipe.exe (실행파일)"
        echo "==============================================="
        echo "다운로드: Actions → Artifacts 에서 확인"
        echo "==============================================="